/**
 * SNA Link Prediction
 * Social-Network-Analysis Link Prediction Tool.
 *
 * The version of the OpenAPI document: 1.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpParameterCodec, HttpParams, HttpResponse} from '@angular/common/http';
import {CustomHttpParameterCodec} from '../encoder';
import {Observable} from 'rxjs';

import {Project} from '../model/models';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ProjectsService {

  protected basePath = 'http://localhost:8080/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object") {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

  /**
   * Creates a project with an original network file.
   * Creates a project with an original network file.
   * @param designation
   * @param description
   * @param networkDesignation
   * @param networkDirected
   * @param networkMultigraph
   * @param networkFile Binary object which contains the network file with a standard network format.
   * @param fileFormat
   * @param additionalNetworkFile Binary object which contains an additional network file with a standard network format (especailly used for CSV imports).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createProject(designation: string, description: string, networkDesignation: string, networkDirected: boolean, networkMultigraph: boolean, networkFile: Blob, fileFormat: string, additionalNetworkFile?: Blob, observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<Project>;
  public createProject(designation: string, description: string, networkDesignation: string, networkDirected: boolean, networkMultigraph: boolean, networkFile: Blob, fileFormat: string, additionalNetworkFile?: Blob, observe?: 'response', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpResponse<Project>>;
  public createProject(designation: string, description: string, networkDesignation: string, networkDirected: boolean, networkMultigraph: boolean, networkFile: Blob, fileFormat: string, additionalNetworkFile?: Blob, observe?: 'events', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpEvent<Project>>;
  public createProject(designation: string, description: string, networkDesignation: string, networkDirected: boolean, networkMultigraph: boolean, networkFile: Blob, fileFormat: string, additionalNetworkFile?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: { httpHeaderAccept?: 'application/json' }): Observable<any> {
    if (designation === null || designation === undefined) {
      throw new Error('Required parameter designation was null or undefined when calling createProject.');
    }
    if (description === null || description === undefined) {
      throw new Error('Required parameter description was null or undefined when calling createProject.');
    }
    if (networkDesignation === null || networkDesignation === undefined) {
      throw new Error('Required parameter networkDesignation was null or undefined when calling createProject.');
    }
    if (networkDirected === null || networkDirected === undefined) {
            throw new Error('Required parameter networkDirected was null or undefined when calling createProject.');
        }
        if (networkMultigraph === null || networkMultigraph === undefined) {
            throw new Error('Required parameter networkMultigraph was null or undefined when calling createProject.');
        }
        if (networkFile === null || networkFile === undefined) {
            throw new Error('Required parameter networkFile was null or undefined when calling createProject.');
        }
        if (fileFormat === null || fileFormat === undefined) {
            throw new Error('Required parameter fileFormat was null or undefined when calling createProject.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

    // to determine the Content-Type header
    const consumes: string[] = [
      'multipart/form-data'
    ];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any; };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({encoder: this.encoder});
    }

    if (designation !== undefined) {
            formParams = formParams.append('designation', <any>designation) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('description', <any>description) as any || formParams;
        }
        if (networkDesignation !== undefined) {
            formParams = formParams.append('network_designation', <any>networkDesignation) as any || formParams;
        }
        if (networkDirected !== undefined) {
            formParams = formParams.append('network_directed', <any>networkDirected) as any || formParams;
        }
    if (networkMultigraph !== undefined) {
      formParams = formParams.append('network_multigraph', <any>networkMultigraph) as any || formParams;
    }
    if (networkFile !== undefined) {
      formParams = formParams.append('network_file', <any>networkFile) as any || formParams;
    }
    if (fileFormat !== undefined) {
      formParams = formParams.append('file_format', <any>fileFormat) as any || formParams;
    }
    if (additionalNetworkFile !== undefined) {
      formParams = formParams.append('additional_network_file', <any>additionalNetworkFile) as any || formParams;
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.post<Project>(`${this.configuration.basePath}/projects`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete project by an ID.
     * Deletes a project by an ID.
     * @param projectId ID of the project to delete.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProjectById(projectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;
    public deleteProjectById(projectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;
    public deleteProjectById(projectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;
    public deleteProjectById(projectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteProjectById.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/projects/${encodeURIComponent(String(projectId))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find project by an ID.
     * Returns a project by an ID.
     * @param projectId ID of the project to return.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjectById(projectId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Project>;
    public getProjectById(projectId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Project>>;
    public getProjectById(projectId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Project>>;
    public getProjectById(projectId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getProjectById.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Project>(`${this.configuration.basePath}/projects/${encodeURIComponent(String(projectId))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of available projects.
     * Get all projects as an array.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProjects(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<Project>>;
    public getProjects(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<Project>>>;
    public getProjects(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<Project>>>;
    public getProjects(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<Project>>(`${this.configuration.basePath}/projects`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

  /**
   * Update project by an ID.
   * Updates a project by an ID.
   * @param projectId ID of the project to update.
   * @param designation
   * @param description
   * @param networkDesignation
   * @param networkDirected
   * @param networkMultigraph
   * @param networkFile Binary object which contains the network file with a standard network format.
   * @param fileFormat
   * @param additionalNetworkFile Binary object which contains an additional network file with a standard network format (especailly used for CSV imports).
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateProjectById(projectId: string, designation: string, description: string, networkDesignation?: string, networkDirected?: boolean, networkMultigraph?: boolean, networkFile?: Blob, fileFormat?: string, additionalNetworkFile?: Blob, observe?: 'body', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<Project>;
  public updateProjectById(projectId: string, designation: string, description: string, networkDesignation?: string, networkDirected?: boolean, networkMultigraph?: boolean, networkFile?: Blob, fileFormat?: string, additionalNetworkFile?: Blob, observe?: 'response', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpResponse<Project>>;
  public updateProjectById(projectId: string, designation: string, description: string, networkDesignation?: string, networkDirected?: boolean, networkMultigraph?: boolean, networkFile?: Blob, fileFormat?: string, additionalNetworkFile?: Blob, observe?: 'events', reportProgress?: boolean, options?: { httpHeaderAccept?: 'application/json' }): Observable<HttpEvent<Project>>;
  public updateProjectById(projectId: string, designation: string, description: string, networkDesignation?: string, networkDirected?: boolean, networkMultigraph?: boolean, networkFile?: Blob, fileFormat?: string, additionalNetworkFile?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: { httpHeaderAccept?: 'application/json' }): Observable<any> {
    if (projectId === null || projectId === undefined) {
      throw new Error('Required parameter projectId was null or undefined when calling updateProjectById.');
    }
    if (designation === null || designation === undefined) {
      throw new Error('Required parameter designation was null or undefined when calling updateProjectById.');
    }
    if (description === null || description === undefined) {
      throw new Error('Required parameter description was null or undefined when calling updateProjectById.');
    }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any; };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({encoder: this.encoder});
    }

    if (designation !== undefined) {
      formParams = formParams.append('designation', <any>designation) as any || formParams;
    }
    if (description !== undefined) {
            formParams = formParams.append('description', <any>description) as any || formParams;
        }
        if (networkDesignation !== undefined) {
            formParams = formParams.append('network_designation', <any>networkDesignation) as any || formParams;
        }
        if (networkDirected !== undefined) {
            formParams = formParams.append('network_directed', <any>networkDirected) as any || formParams;
        }
    if (networkMultigraph !== undefined) {
      formParams = formParams.append('network_multigraph', <any>networkMultigraph) as any || formParams;
    }
    if (networkFile !== undefined) {
      formParams = formParams.append('network_file', <any>networkFile) as any || formParams;
    }
    if (fileFormat !== undefined) {
      formParams = formParams.append('file_format', <any>fileFormat) as any || formParams;
    }
    if (additionalNetworkFile !== undefined) {
      formParams = formParams.append('additional_network_file', <any>additionalNetworkFile) as any || formParams;
    }

    let responseType: 'text' | 'json' = 'json';
    if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
      responseType = 'text';
    }

    return this.httpClient.put<Project>(`${this.configuration.basePath}/projects/${encodeURIComponent(String(projectId))}`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server.models.evaluation_setup import EvaluationSetup
from linkprediction.openapi_server.models.predictor import Predictor
from linkprediction.openapi_server import util

from linkprediction.openapi_server.models.evaluation_setup import EvaluationSetup  # noqa: E501
from linkprediction.openapi_server.models.predictor import Predictor  # noqa: E501

class Predictors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_predictors=None, selected_predictors=None, evaluation_setup=None):  # noqa: E501
        """Predictors - a model defined in OpenAPI

        :param available_predictors: The available_predictors of this Predictors.  # noqa: E501
        :type available_predictors: List[Predictor]
        :param selected_predictors: The selected_predictors of this Predictors.  # noqa: E501
        :type selected_predictors: List[Predictor]
        :param evaluation_setup: The evaluation_setup of this Predictors.  # noqa: E501
        :type evaluation_setup: EvaluationSetup
        """
        self.openapi_types = {
            'available_predictors': List[Predictor],
            'selected_predictors': List[Predictor],
            'evaluation_setup': EvaluationSetup
        }

        self.attribute_map = {
            'available_predictors': 'available_predictors',
            'selected_predictors': 'selected_predictors',
            'evaluation_setup': 'evaluation_setup'
        }

        self._available_predictors = available_predictors
        self._selected_predictors = selected_predictors
        self._evaluation_setup = evaluation_setup

    @classmethod
    def from_dict(cls, dikt) -> 'Predictors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Predictors of this Predictors.  # noqa: E501
        :rtype: Predictors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_predictors(self):
        """Gets the available_predictors of this Predictors.


        :return: The available_predictors of this Predictors.
        :rtype: List[Predictor]
        """
        return self._available_predictors

    @available_predictors.setter
    def available_predictors(self, available_predictors):
        """Sets the available_predictors of this Predictors.


        :param available_predictors: The available_predictors of this Predictors.
        :type available_predictors: List[Predictor]
        """
        if available_predictors is None:
            raise ValueError("Invalid value for `available_predictors`, must not be `None`")  # noqa: E501

        self._available_predictors = available_predictors

    @property
    def selected_predictors(self):
        """Gets the selected_predictors of this Predictors.


        :return: The selected_predictors of this Predictors.
        :rtype: List[Predictor]
        """
        return self._selected_predictors

    @selected_predictors.setter
    def selected_predictors(self, selected_predictors):
        """Sets the selected_predictors of this Predictors.


        :param selected_predictors: The selected_predictors of this Predictors.
        :type selected_predictors: List[Predictor]
        """
        if selected_predictors is None:
            raise ValueError("Invalid value for `selected_predictors`, must not be `None`")  # noqa: E501

        self._selected_predictors = selected_predictors

    @property
    def evaluation_setup(self):
        """Gets the evaluation_setup of this Predictors.


        :return: The evaluation_setup of this Predictors.
        :rtype: EvaluationSetup
        """
        return self._evaluation_setup

    @evaluation_setup.setter
    def evaluation_setup(self, evaluation_setup):
        """Sets the evaluation_setup of this Predictors.


        :param evaluation_setup: The evaluation_setup of this Predictors.
        :type evaluation_setup: EvaluationSetup
        """
        if evaluation_setup is None:
            raise ValueError("Invalid value for `evaluation_setup`, must not be `None`")  # noqa: E501

        self._evaluation_setup = evaluation_setup

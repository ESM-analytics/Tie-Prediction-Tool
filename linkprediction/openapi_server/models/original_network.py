# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server import util


class OriginalNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, designation=None, directed=None, multigraph=None, node_count=None, edge_count=None):  # noqa: E501
        """OriginalNetwork - a model defined in OpenAPI

        :param id: The id of this OriginalNetwork.  # noqa: E501
        :type id: str
        :param designation: The designation of this OriginalNetwork.  # noqa: E501
        :type designation: str
        :param directed: The directed of this OriginalNetwork.  # noqa: E501
        :type directed: bool
        :param multigraph: The multigraph of this OriginalNetwork.  # noqa: E501
        :type multigraph: bool
        :param node_count: The node_count of this OriginalNetwork.  # noqa: E501
        :type node_count: int
        :param edge_count: The edge_count of this OriginalNetwork.  # noqa: E501
        :type edge_count: int
        """
        self.openapi_types = {
            'id': str,
            'designation': str,
            'directed': bool,
            'multigraph': bool,
            'node_count': int,
            'edge_count': int
        }

        self.attribute_map = {
            'id': 'id',
            'designation': 'designation',
            'directed': 'directed',
            'multigraph': 'multigraph',
            'node_count': 'node_count',
            'edge_count': 'edge_count'
        }

        self._id = id
        self._designation = designation
        self._directed = directed
        self._multigraph = multigraph
        self._node_count = node_count
        self._edge_count = edge_count

    @classmethod
    def from_dict(cls, dikt) -> 'OriginalNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OriginalNetwork of this OriginalNetwork.  # noqa: E501
        :rtype: OriginalNetwork
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OriginalNetwork.


        :return: The id of this OriginalNetwork.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OriginalNetwork.


        :param id: The id of this OriginalNetwork.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def designation(self):
        """Gets the designation of this OriginalNetwork.


        :return: The designation of this OriginalNetwork.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this OriginalNetwork.


        :param designation: The designation of this OriginalNetwork.
        :type designation: str
        """
        if designation is None:
            raise ValueError("Invalid value for `designation`, must not be `None`")  # noqa: E501

        self._designation = designation

    @property
    def directed(self):
        """Gets the directed of this OriginalNetwork.


        :return: The directed of this OriginalNetwork.
        :rtype: bool
        """
        return self._directed

    @directed.setter
    def directed(self, directed):
        """Sets the directed of this OriginalNetwork.


        :param directed: The directed of this OriginalNetwork.
        :type directed: bool
        """
        if directed is None:
            raise ValueError("Invalid value for `directed`, must not be `None`")  # noqa: E501

        self._directed = directed

    @property
    def multigraph(self):
        """Gets the multigraph of this OriginalNetwork.


        :return: The multigraph of this OriginalNetwork.
        :rtype: bool
        """
        return self._multigraph

    @multigraph.setter
    def multigraph(self, multigraph):
        """Sets the multigraph of this OriginalNetwork.


        :param multigraph: The multigraph of this OriginalNetwork.
        :type multigraph: bool
        """
        if multigraph is None:
            raise ValueError("Invalid value for `multigraph`, must not be `None`")  # noqa: E501

        self._multigraph = multigraph

    @property
    def node_count(self):
        """Gets the node_count of this OriginalNetwork.


        :return: The node_count of this OriginalNetwork.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this OriginalNetwork.


        :param node_count: The node_count of this OriginalNetwork.
        :type node_count: int
        """
        if node_count is None:
            raise ValueError("Invalid value for `node_count`, must not be `None`")  # noqa: E501

        self._node_count = node_count

    @property
    def edge_count(self):
        """Gets the edge_count of this OriginalNetwork.


        :return: The edge_count of this OriginalNetwork.
        :rtype: int
        """
        return self._edge_count

    @edge_count.setter
    def edge_count(self, edge_count):
        """Sets the edge_count of this OriginalNetwork.


        :param edge_count: The edge_count of this OriginalNetwork.
        :type edge_count: int
        """
        if edge_count is None:
            raise ValueError("Invalid value for `edge_count`, must not be `None`")  # noqa: E501

        self._edge_count = edge_count

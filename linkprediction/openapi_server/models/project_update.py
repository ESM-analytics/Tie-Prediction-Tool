# coding: utf-8

from __future__ import absolute_import

from linkprediction.openapi_server import util
from linkprediction.openapi_server.models.base_model_ import Model


class ProjectUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, designation=None, description=None, network_designation=None, network_directed=None,
                 network_multigraph=None, network_file=None, additional_network_file=None,
                 file_format=None):  # noqa: E501
        """ProjectUpdate - a model defined in OpenAPI

        :param designation: The designation of this ProjectUpdate.  # noqa: E501
        :type designation: str
        :param description: The description of this ProjectUpdate.  # noqa: E501
        :type description: str
        :param network_designation: The network_designation of this ProjectUpdate.  # noqa: E501
        :type network_designation: str
        :param network_directed: The network_directed of this ProjectUpdate.  # noqa: E501
        :type network_directed: bool
        :param network_multigraph: The network_multigraph of this ProjectUpdate.  # noqa: E501
        :type network_multigraph: bool
        :param network_file: The network_file of this ProjectUpdate.  # noqa: E501
        :type network_file: file
        :param additional_network_file: The additional_network_file of this ProjectUpdate.  # noqa: E501
        :type additional_network_file: file
        :param file_format: The file_format of this ProjectUpdate.  # noqa: E501
        :type file_format: str
        """
        self.openapi_types = {
            'designation': str,
            'description': str,
            'network_designation': str,
            'network_directed': bool,
            'network_multigraph': bool,
            'network_file': file,
            'additional_network_file': file,
            'file_format': str
        }

        self.attribute_map = {
            'designation': 'designation',
            'description': 'description',
            'network_designation': 'network_designation',
            'network_directed': 'network_directed',
            'network_multigraph': 'network_multigraph',
            'network_file': 'network_file',
            'additional_network_file': 'additional_network_file',
            'file_format': 'file_format'
        }

        self._designation = designation
        self._description = description
        self._network_designation = network_designation
        self._network_directed = network_directed
        self._network_multigraph = network_multigraph
        self._network_file = network_file
        self._additional_network_file = additional_network_file
        self._file_format = file_format

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectUpdate of this ProjectUpdate.  # noqa: E501
        :rtype: ProjectUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def designation(self):
        """Gets the designation of this ProjectUpdate.


        :return: The designation of this ProjectUpdate.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this ProjectUpdate.


        :param designation: The designation of this ProjectUpdate.
        :type designation: str
        """
        if designation is None:
            raise ValueError("Invalid value for `designation`, must not be `None`")  # noqa: E501

        self._designation = designation

    @property
    def description(self):
        """Gets the description of this ProjectUpdate.


        :return: The description of this ProjectUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectUpdate.


        :param description: The description of this ProjectUpdate.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def network_designation(self):
        """Gets the network_designation of this ProjectUpdate.


        :return: The network_designation of this ProjectUpdate.
        :rtype: str
        """
        return self._network_designation

    @network_designation.setter
    def network_designation(self, network_designation):
        """Sets the network_designation of this ProjectUpdate.


        :param network_designation: The network_designation of this ProjectUpdate.
        :type network_designation: str
        """

        self._network_designation = network_designation

    @property
    def network_directed(self):
        """Gets the network_directed of this ProjectUpdate.


        :return: The network_directed of this ProjectUpdate.
        :rtype: bool
        """
        return self._network_directed

    @network_directed.setter
    def network_directed(self, network_directed):
        """Sets the network_directed of this ProjectUpdate.


        :param network_directed: The network_directed of this ProjectUpdate.
        :type network_directed: bool
        """

        self._network_directed = network_directed

    @property
    def network_multigraph(self):
        """Gets the network_multigraph of this ProjectUpdate.


        :return: The network_multigraph of this ProjectUpdate.
        :rtype: bool
        """
        return self._network_multigraph

    @network_multigraph.setter
    def network_multigraph(self, network_multigraph):
        """Sets the network_multigraph of this ProjectUpdate.


        :param network_multigraph: The network_multigraph of this ProjectUpdate.
        :type network_multigraph: bool
        """

        self._network_multigraph = network_multigraph

    @property
    def network_file(self):
        """Gets the network_file of this ProjectUpdate.

        Binary object which contains the network file with a standard network format.  # noqa: E501

        :return: The network_file of this ProjectUpdate.
        :rtype: file
        """
        return self._network_file

    @network_file.setter
    def network_file(self, network_file):
        """Sets the network_file of this ProjectUpdate.

        Binary object which contains the network file with a standard network format.  # noqa: E501

        :param network_file: The network_file of this ProjectUpdate.
        :type network_file: file
        """

        self._network_file = network_file

    @property
    def additional_network_file(self):
        """Gets the additional_network_file of this ProjectUpdate.

        Binary object which contains an additional network file with a standard network format (especailly used for CSV imports).  # noqa: E501

        :return: The additional_network_file of this ProjectUpdate.
        :rtype: file
        """
        return self._additional_network_file

    @additional_network_file.setter
    def additional_network_file(self, additional_network_file):
        """Sets the additional_network_file of this ProjectUpdate.

        Binary object which contains an additional network file with a standard network format (especailly used for CSV imports).  # noqa: E501

        :param additional_network_file: The additional_network_file of this ProjectUpdate.
        :type additional_network_file: file
        """

        self._additional_network_file = additional_network_file

    @property
    def file_format(self):
        """Gets the file_format of this ProjectUpdate.


        :return: The file_format of this ProjectUpdate.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this ProjectUpdate.


        :param file_format: The file_format of this ProjectUpdate.
        :type file_format: str
        """
        allowed_values = ["GEXF", "UCINET", "Ajacency List", "Edge List", "Weighted Edge List", "GML", "Pickle",
                          "GraphML", "LEDA", "YAML", "Pajek", "CSV"]  # noqa: E501
        if file_format not in allowed_values:
            raise ValueError(
                "Invalid value for `file_format` ({0}), must be one of {1}"
                .format(file_format, allowed_values)
            )

        self._file_format = file_format

# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, designation=None, description=None, original_network_id=None, predicted_network_id=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param id: The id of this Project.  # noqa: E501
        :type id: str
        :param designation: The designation of this Project.  # noqa: E501
        :type designation: str
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param original_network_id: The original_network_id of this Project.  # noqa: E501
        :type original_network_id: str
        :param predicted_network_id: The predicted_network_id of this Project.  # noqa: E501
        :type predicted_network_id: str
        """
        self.openapi_types = {
            'id': str,
            'designation': str,
            'description': str,
            'original_network_id': str,
            'predicted_network_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'designation': 'designation',
            'description': 'description',
            'original_network_id': 'original_network_id',
            'predicted_network_id': 'predicted_network_id'
        }

        self._id = id
        self._designation = designation
        self._description = description
        self._original_network_id = original_network_id
        self._predicted_network_id = predicted_network_id

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def designation(self):
        """Gets the designation of this Project.


        :return: The designation of this Project.
        :rtype: str
        """
        return self._designation

    @designation.setter
    def designation(self, designation):
        """Sets the designation of this Project.


        :param designation: The designation of this Project.
        :type designation: str
        """
        if designation is None:
            raise ValueError("Invalid value for `designation`, must not be `None`")  # noqa: E501

        self._designation = designation

    @property
    def description(self):
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def original_network_id(self):
        """Gets the original_network_id of this Project.


        :return: The original_network_id of this Project.
        :rtype: str
        """
        return self._original_network_id

    @original_network_id.setter
    def original_network_id(self, original_network_id):
        """Sets the original_network_id of this Project.


        :param original_network_id: The original_network_id of this Project.
        :type original_network_id: str
        """
        if original_network_id is None:
            raise ValueError("Invalid value for `original_network_id`, must not be `None`")  # noqa: E501

        self._original_network_id = original_network_id

    @property
    def predicted_network_id(self):
        """Gets the predicted_network_id of this Project.


        :return: The predicted_network_id of this Project.
        :rtype: str
        """
        return self._predicted_network_id

    @predicted_network_id.setter
    def predicted_network_id(self, predicted_network_id):
        """Sets the predicted_network_id of this Project.


        :param predicted_network_id: The predicted_network_id of this Project.
        :type predicted_network_id: str
        """
        if predicted_network_id is None:
            raise ValueError("Invalid value for `predicted_network_id`, must not be `None`")  # noqa: E501

        self._predicted_network_id = predicted_network_id

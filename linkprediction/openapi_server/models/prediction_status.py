# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server import util


class PredictionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, timestamp=None, current_step=None, max_steps=None, current_step_name=None, state=None):  # noqa: E501
        """PredictionStatus - a model defined in OpenAPI

        :param id: The id of this PredictionStatus.  # noqa: E501
        :type id: str
        :param timestamp: The timestamp of this PredictionStatus.  # noqa: E501
        :type timestamp: datetime
        :param current_step: The current_step of this PredictionStatus.  # noqa: E501
        :type current_step: int
        :param max_steps: The max_steps of this PredictionStatus.  # noqa: E501
        :type max_steps: int
        :param current_step_name: The current_step_name of this PredictionStatus.  # noqa: E501
        :type current_step_name: str
        :param state: The state of this PredictionStatus.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'id': str,
            'timestamp': datetime,
            'current_step': int,
            'max_steps': int,
            'current_step_name': str,
            'state': str
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'current_step': 'current_step',
            'max_steps': 'max_steps',
            'current_step_name': 'current_step_name',
            'state': 'state'
        }

        self._id = id
        self._timestamp = timestamp
        self._current_step = current_step
        self._max_steps = max_steps
        self._current_step_name = current_step_name
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'PredictionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PredictionStatus of this PredictionStatus.  # noqa: E501
        :rtype: PredictionStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PredictionStatus.


        :return: The id of this PredictionStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PredictionStatus.


        :param id: The id of this PredictionStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this PredictionStatus.


        :return: The timestamp of this PredictionStatus.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PredictionStatus.


        :param timestamp: The timestamp of this PredictionStatus.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def current_step(self):
        """Gets the current_step of this PredictionStatus.


        :return: The current_step of this PredictionStatus.
        :rtype: int
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step):
        """Sets the current_step of this PredictionStatus.


        :param current_step: The current_step of this PredictionStatus.
        :type current_step: int
        """
        if current_step is None:
            raise ValueError("Invalid value for `current_step`, must not be `None`")  # noqa: E501

        self._current_step = current_step

    @property
    def max_steps(self):
        """Gets the max_steps of this PredictionStatus.


        :return: The max_steps of this PredictionStatus.
        :rtype: int
        """
        return self._max_steps

    @max_steps.setter
    def max_steps(self, max_steps):
        """Sets the max_steps of this PredictionStatus.


        :param max_steps: The max_steps of this PredictionStatus.
        :type max_steps: int
        """
        if max_steps is None:
            raise ValueError("Invalid value for `max_steps`, must not be `None`")  # noqa: E501

        self._max_steps = max_steps

    @property
    def current_step_name(self):
        """Gets the current_step_name of this PredictionStatus.


        :return: The current_step_name of this PredictionStatus.
        :rtype: str
        """
        return self._current_step_name

    @current_step_name.setter
    def current_step_name(self, current_step_name):
        """Sets the current_step_name of this PredictionStatus.


        :param current_step_name: The current_step_name of this PredictionStatus.
        :type current_step_name: str
        """
        if current_step_name is None:
            raise ValueError("Invalid value for `current_step_name`, must not be `None`")  # noqa: E501

        self._current_step_name = current_step_name

    @property
    def state(self):
        """Gets the state of this PredictionStatus.


        :return: The state of this PredictionStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PredictionStatus.


        :param state: The state of this PredictionStatus.
        :type state: str
        """
        allowed_values = ["Waiting", "Processing", "Finished", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

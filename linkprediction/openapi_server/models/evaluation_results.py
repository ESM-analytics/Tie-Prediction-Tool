# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server import util


class EvaluationResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, results=None):  # noqa: E501
        """EvaluationResults - a model defined in OpenAPI

        :param timestamp: The timestamp of this EvaluationResults.  # noqa: E501
        :type timestamp: datetime
        :param results: The results of this EvaluationResults.  # noqa: E501
        :type results: object
        """
        self.openapi_types = {
            'timestamp': datetime,
            'results': object
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'results': 'results'
        }

        self._timestamp = timestamp
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'EvaluationResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EvaluationResults of this EvaluationResults.  # noqa: E501
        :rtype: EvaluationResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this EvaluationResults.


        :return: The timestamp of this EvaluationResults.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EvaluationResults.


        :param timestamp: The timestamp of this EvaluationResults.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def results(self):
        """Gets the results of this EvaluationResults.


        :return: The results of this EvaluationResults.
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this EvaluationResults.


        :param results: The results of this EvaluationResults.
        :type results: object
        """

        self._results = results

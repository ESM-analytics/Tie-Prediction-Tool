# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from linkprediction.openapi_server.models.base_model_ import Model
from linkprediction.openapi_server import util


class PredictedNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes=None, links=None, information=None):  # noqa: E501
        """PredictedNetwork - a model defined in OpenAPI

        :param nodes: The nodes of this PredictedNetwork.  # noqa: E501
        :type nodes: object
        :param links: The links of this PredictedNetwork.  # noqa: E501
        :type links: object
        :param information: The information of this PredictedNetwork.  # noqa: E501
        :type information: object
        """
        self.openapi_types = {
            'nodes': object,
            'links': object,
            'information': object
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'links': 'links',
            'information': 'information'
        }

        self._nodes = nodes
        self._links = links
        self._information = information

    @classmethod
    def from_dict(cls, dikt) -> 'PredictedNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PredictedNetwork of this PredictedNetwork.  # noqa: E501
        :rtype: PredictedNetwork
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this PredictedNetwork.


        :return: The nodes of this PredictedNetwork.
        :rtype: object
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this PredictedNetwork.


        :param nodes: The nodes of this PredictedNetwork.
        :type nodes: object
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def links(self):
        """Gets the links of this PredictedNetwork.


        :return: The links of this PredictedNetwork.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PredictedNetwork.


        :param links: The links of this PredictedNetwork.
        :type links: object
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def information(self):
        """Gets the information of this PredictedNetwork.


        :return: The information of this PredictedNetwork.
        :rtype: int
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this PredictedNetwork.


        :param information: The information of this PredictedNetwork.
        :type information: int
        """
        if information is None:
            raise ValueError("Invalid value for `information`, must not be `None`")  # noqa: E501

        self._information = information

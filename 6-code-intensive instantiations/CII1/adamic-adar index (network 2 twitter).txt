#1 Load neccessray Libraries
install.packages("igraph")
install.packages("linkprediction")
install.packages("dplyr")
install.packages("ROCR")
library(igraph)
library(linkprediction)
library(dplyr)
library(ROCR)

#2 Load graphml network
twt <- read_graph("graphml-networks/twitter-745-directed-project(numeric).graphml", "graphml")

#3 Create random tie removal function that keeps giant component (for the test dataset)
remove.edges.test <- function(g, n) {
  num.tries <- 0
  while (gsize(g) > 1144) {
    num.tries <- num.tries + 1
    set.Seed(1)
    g2 <- delete.edges(g, E(g)[sample(seq_along(E(g)), n)])
    if (no.clusters(g2) == no.clusters(g)) {
      print(paste("Total number of tries and remaining ties:", num.tries, gsize(g2)))
      return(g2)
    }
  }
  return (g)
}

#4 Generate test network while keeping giant component (randomly remove 5 percent of edges (=60) from twt with 1204 ties, resulting in 1144 ties)
twt_test <- twt
repeat{
       twt_test <- remove.edges.test(twt_test, 1)
       Sys.sleep(0.0001)
       if(gsize(twt_test) == 1144){
       break
      }
      }
twt_test
#Should lead to 1144 edges

#5 Create random tie removal function that keeps giant component (for the train dataset)
remove.edges.train <- function(g, n) {
  num.tries <- 0
  while (gsize(g) > 915) {
    num.tries <- num.tries + 1
    set.seed(1)
    g2 <- delete.edges(g, E(g)[sample(seq_along(E(g)), n)])
    if (no.clusters(g2) == no.clusters(g)) {
      print(paste("Total number of tries and remaining ties:", num.tries, gsize(g2)))
      return(g2)
    }
  }
  return (g)
}

#6 Generate train network while keeping giant component (randomly remove 20 percent of edges (=229) from twt_test with 1144 ties, resulting in 915 ties)
twt_train <- twt_test
repeat{
       twt_train <- remove.edges.train(twt_train, 1)
       Sys.sleep(0.0001)
       if(gsize(twt_train) == 915){
       break
      }
      }
twt_train
#Should lead to 915 edges

#7 Transform to undirected network
twt_test <- as.undirected (twt_test)
twt_train <- as.undirected (twt_train)

#8 Calculate adamic-adar scores for each pair of actors in twt_test
aa_test <- proxfun(twt_test,method = "aa", value= "edgelist") %>% filter(from < to) %>% rename(aa = value)

#9 Calculate adamic-adar scores for each pair of actors in twt_train
aa_train <- proxfun(twt_train,method = "aa", value= "edgelist") %>% filter(from < to) %>% rename(aa = value)

#10 Create dyadic columns of each actor pair and check result
testdf <- tidyr::crossing(from = seq(1, vcount(twt_train)),to = seq(1, vcount(twt_train))) %>% filter(from < to) 
testdf

#from to
#1    2 
#1    3  

#11 Append training column to dyadic colums (left join) and check result
testdf <- testdf %>% left_join(igraph::as_data_frame(twt_train, what="edges") %>% as_tibble(), by = c("from", "to"))
testdf

#from to weight
#1    2  0 	   
#1    3  0

#12 Append test column to dyadic colums (left join) and check result
testdf <- testdf %>% left_join(igraph::as_data_frame(twt_test, what="edges") %>% as_tibble(), by = c("from", "to"))
testdf

#from to weight.x weight.y
#1    2  0        0	   
#1    3  0        0

#13 Convert numerical dataframe to logical dataframe and set TRUE/FALSE
testdf <- testdf %>% mutate_at(c("weight.x"),as.logical)
testdf <- testdf %>% mutate_at(c("weight.y"),as.logical)
testdf[is.na(testdf)] <- FALSE

#from to weight.x weight.y
#1    2  FALSE    FALSE	   
#1    3  FALSE    FALSE

#14 Rename dataframe columns to "twttrain" and "twttest"
testdf <- testdf %>% rename(twttrain = weight.x,twttest = weight.y)

#from to twttrain twttest
#1    2  FALSE    FALSE	   
#1    3  FALSE    FALSE

#15 Append transition column to logical dataframe
testdf <- testdf %>% mutate( test = twttest & !twttrain)

#from to twttrain twttest test
#1    2  FALSE    FALSE	  FALSE  
#1    3  FALSE    FALSE   FALSE

#16 Append preferential attachment scores column (left join)
testdf <- testdf %>% left_join(aa_train, by=c("from", "to"))

#from to twttrain twttest test   aa
#1    2  FALSE    FALSE	  FALSE  378
#1    3  FALSE    FALSE   FALSE  588 

#17 Format AA-Values
testdf <- testdf %>% mutate_at(c("aa"),funs(ifelse(is.na(.), 0, .)))

#18 Create prediction parameters
predict <- prediction(testdf$aa,testdf$test)

#19 Create performance parameters
perform_roc <- performance(predict, "tpr","fpr")
perform_auc <- performance(predict, measure = "auc")

#20 Create ROC curve 
plot(perform_roc)

#21 Extract AUC value
perform_auc@y.values
_______________________

AUC: 0,83
(Tool: 0,84)




